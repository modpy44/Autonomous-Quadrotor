// Generated by gencpp from file action_controller/MultiDofFollowJointTrajectoryResult.msg
// DO NOT EDIT!


#ifndef ACTION_CONTROLLER_MESSAGE_MULTIDOFFOLLOWJOINTTRAJECTORYRESULT_H
#define ACTION_CONTROLLER_MESSAGE_MULTIDOFFOLLOWJOINTTRAJECTORYRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace action_controller
{
template <class ContainerAllocator>
struct MultiDofFollowJointTrajectoryResult_
{
  typedef MultiDofFollowJointTrajectoryResult_<ContainerAllocator> Type;

  MultiDofFollowJointTrajectoryResult_()
    : error_code(0)  {
    }
  MultiDofFollowJointTrajectoryResult_(const ContainerAllocator& _alloc)
    : error_code(0)  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESSFUL)
  #undef SUCCESSFUL
#endif
#if defined(_WIN32) && defined(INVALID_GOAL)
  #undef INVALID_GOAL
#endif
#if defined(_WIN32) && defined(INVALID_JOINTS)
  #undef INVALID_JOINTS
#endif
#if defined(_WIN32) && defined(OLD_HEADER_TIMESTAMP)
  #undef OLD_HEADER_TIMESTAMP
#endif
#if defined(_WIN32) && defined(PATH_TOLERANCE_VIOLATED)
  #undef PATH_TOLERANCE_VIOLATED
#endif
#if defined(_WIN32) && defined(GOAL_TOLERANCE_VIOLATED)
  #undef GOAL_TOLERANCE_VIOLATED
#endif

  enum {
    SUCCESSFUL = 0,
    INVALID_GOAL = -1,
    INVALID_JOINTS = -2,
    OLD_HEADER_TIMESTAMP = -3,
    PATH_TOLERANCE_VIOLATED = -4,
    GOAL_TOLERANCE_VIOLATED = -5,
  };


  typedef boost::shared_ptr< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> const> ConstPtr;

}; // struct MultiDofFollowJointTrajectoryResult_

typedef ::action_controller::MultiDofFollowJointTrajectoryResult_<std::allocator<void> > MultiDofFollowJointTrajectoryResult;

typedef boost::shared_ptr< ::action_controller::MultiDofFollowJointTrajectoryResult > MultiDofFollowJointTrajectoryResultPtr;
typedef boost::shared_ptr< ::action_controller::MultiDofFollowJointTrajectoryResult const> MultiDofFollowJointTrajectoryResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator1> & lhs, const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator1> & lhs, const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace action_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6243274b5d629dc838814109754410d5";
  }

  static const char* value(const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6243274b5d629dc8ULL;
  static const uint64_t static_value2 = 0x38814109754410d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_controller/MultiDofFollowJointTrajectoryResult";
  }

  static const char* value(const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 error_code\n"
"int32 SUCCESSFUL = 0\n"
"int32 INVALID_GOAL = -1\n"
"int32 INVALID_JOINTS = -2\n"
"int32 OLD_HEADER_TIMESTAMP = -3\n"
"int32 PATH_TOLERANCE_VIOLATED = -4\n"
"int32 GOAL_TOLERANCE_VIOLATED = -5\n"
"\n"
;
  }

  static const char* value(const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiDofFollowJointTrajectoryResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_controller::MultiDofFollowJointTrajectoryResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_CONTROLLER_MESSAGE_MULTIDOFFOLLOWJOINTTRAJECTORYRESULT_H
